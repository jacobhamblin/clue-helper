{"version":3,"sources":["Setup/index.js","Gameplay/Cell/index.js","Gameplay/index.js","App.js","serviceWorker.js","index.js"],"names":["Setup","state","_this","props","id","newPlayerName","players","play","enterGame","reportState","removePlayer","setState","filter","player","getPlayersList","react_default","a","createElement","className","map","name","onClick","submitPlayer","_this$state","concat","Object","toConsumableArray","_this2","this","placeholder","onChange","e","target","value","onKeyPress","key","Component","valToColor","Cell","_ref","label","playerID","updateValue","style","backgroundColor","Gameplay","classicSuspects","MDSuspects","classicWeapons","MDWeapons","classicRooms","MDRooms","customSuspects","customWeapons","customRooms","newAssetModal","type","editingAnAsset","removeAssetModal","removeAssetType","removeAssetLabel","removeAsset","forEach","prefix","noteValues","returnToSetup","tracking","newTracking","objectSpread","length","submitNewAsset","newAsset","version","rows","sectionHeader","Fragment","Array","push","el","assets","_loop","i","row","j","Gameplay_Cell","_this3","populateRowsOfType","_this4","_this$state2","playerNames","MDActive","modalActive","editingAsset","substr","newAssetVisible","removeAssetVisible","toggleVersion","val","populateBody","modalContents","contains","ref","node","App","game","setup","undefined","handler","get","hasOwnProperty","updateSetupState","Proxy","updateGameState","toggleGameState","src_Gameplay","src_Setup","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mWAyEeA,oNArEbC,MAAQC,EAAKC,MAAMF,OAAS,CAC1BG,GAAI,EACJC,cAAe,GACfC,QAAS,GACTC,MAAM,KAERC,UAAY,WACVN,EAAKC,MAAMM,YAAYP,EAAKD,OAC5BC,EAAKC,MAAMK,eAEbE,aAAe,SAAAN,GAAM,IACXE,EAAYJ,EAAKD,MAAjBK,QACRJ,EAAKS,SAAS,CAAEL,QAASA,EAAQM,OAAO,SAAAC,GAAM,OAAIA,EAAOT,KAAOA,SAElEU,eAAiB,WACf,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACXhB,EAAKD,MAAMK,QAAQa,IAAI,SAAAN,GACtB,OACEE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,YAAOJ,EAAOO,MACdL,EAAAC,EAAAC,cAAA,UACEI,QAAS,WACPnB,EAAKQ,aAAaG,EAAOT,MAF7B,YAYZkB,aAAe,WAAM,IAAAC,EACoBrB,EAAKD,MAApCG,EADWmB,EACXnB,GAAIC,EADOkB,EACPlB,cAAeC,EADRiB,EACQjB,QAC3BJ,EAAKS,SAAS,CACZL,QAAO,GAAAkB,OAAAC,OAAAC,EAAA,EAAAD,CAAMnB,GAAN,CAAe,CAAEF,KAAIgB,KAAMf,KAClCA,cAAe,GACfD,GAAIA,EAAK,6EAGJ,IAAAuB,EAAAC,KACP,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,cACVW,YAAY,cACZC,SAAU,SAAAC,GAAC,OAAIJ,EAAKhB,SAAS,CAAEN,cAAe0B,EAAEC,OAAOC,SACvDC,WAAY,SAAAH,GACI,UAAVA,EAAEI,KAAiBR,EAAKL,gBAE9BW,MAAOL,KAAK3B,MAAMI,gBAEpBU,EAAAC,EAAAC,cAAA,UACEC,UAAU,oBACVG,QAAS,kBAAMM,EAAKL,iBAFtB,gBAMDM,KAAKd,iBACNC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOG,QAAS,kBAAMM,EAAKnB,cAA1C,gBA9DY4B,cCAdC,eAAa,CAAC,UAAW,UAAW,UAAW,UAAW,SAcjDC,MAZf,SAAAC,GAAuD,IAAvCC,EAAuCD,EAAvCC,MAAOC,EAAgCF,EAAhCE,SAAUC,EAAsBH,EAAtBG,YAAaT,EAASM,EAATN,MAC5C,OACElB,EAAAC,EAAAC,cAAA,MACEC,UAAU,QACVG,QAAS,WACPqB,EAAYD,EAAUD,IAExBG,MAAO,CAAEC,gBAAiBP,EAAWJ,OC8O5BY,6MArPb5C,MAAQC,EAAKC,MAAMF,QACnB6C,gBAAkB,CAChB,YACA,aACA,eACA,eACA,eACA,gBAEFC,WAAa7C,EAAK4C,gBAAgBtB,OAAO,CACvC,WACA,YACA,cACA,iBAEFwB,eAAiB,CACf,cACA,QACA,YACA,WACA,OACA,YAEFC,UAAY/C,EAAK8C,eAAexB,OAAO,CAAC,SAAU,gBAClD0B,aAAe,CACb,eACA,SACA,UACA,UACA,OACA,QACA,WACA,cACA,mBAEFC,QAAU,CACR,YACA,SACA,eACA,cACA,UACA,iBACA,cACA,eACA,SACA,gBACA,UACA,cAEFC,eAAiB,KACjBC,cAAgB,KAChBC,YAAc,KACdC,cAAgB,SAAAC,GACdtD,EAAKS,SAAS,CAAE8C,eAAgBD,OAElCE,iBAAmB,SAACF,EAAMhB,GACxBtC,EAAKS,SAAS,CAAEgD,gBAAiBH,EAAMI,iBAAkBpB,OAE3DqB,YAAc,WACZ,IAAML,EAAOtD,EAAKD,MAAM0D,gBAClBnB,EAAQtC,EAAKD,MAAM2D,iBACN1D,EAAK,UAAYsD,GAAOtD,EAAK,KAAOsD,GAAOtD,EAAK,SAAWsD,GAC9E,CAAC,UAAW,KAAM,UAAUM,QAAQ,SAAAC,GAAW7D,EAAK6D,EAASP,GAAQtD,EAAK6D,EAASP,GAAM5C,OACvF,SAAAqB,GAAK,OAAIA,IAAUO,MAErBtC,EAAKS,SAAS,CACZgD,gBAAiB,GACjBC,iBAAkB,QAGtBI,WAAa,CAAC,EAAG,EAAG,EAAG,EAAG,KAC1BC,cAAgB,WACd/D,EAAKC,MAAMM,YAAYP,EAAKD,OAC5BC,EAAKC,MAAM8D,mBAEbvB,YAAc,SAACD,EAAUD,GAAU,IACzB0B,EAAahE,EAAKD,MAAlBiE,SACFC,EAAW1C,OAAA2C,EAAA,EAAA3C,CAAA,GAAQyC,GAEzBC,EAAY1B,GAAUD,IACnB2B,EAAY1B,GAAUD,GAAS,GAAKtC,EAAK8D,WAAWK,OACvDnE,EAAKS,SAAS,CAAEuD,SAAUC,OA8D5BG,eAAiB,WACfpE,EAAK,SAAWA,EAAKD,MAAMwD,gBAAkBvD,EAAK,SAAWA,EAAKD,MAAMwD,gBAAgBjC,OAAO,CAACtB,EAAKD,MAAMsE,WAC3GrE,EAAKS,SAAS,CACZ8C,gBAAgB,EAChBc,SAAU,wFAhEKf,GAAM,IAAA7B,EAAAC,KAAAL,EACOK,KAAK3B,MAA3BiE,EADe3C,EACf2C,SAAUM,EADKjD,EACLiD,QAEdC,EAAO,GACLC,EAAgB,CACpB3D,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2D,SAAA,KACE5D,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVG,QAAS,WACPM,EAAK4B,cAAcC,KAHvB,KAOAzC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAUsC,KAE5BhC,OAAO,IAAIoD,MAAMhD,KAAK3B,MAAMK,QAAQ+D,SACtCI,EAAKI,KACH9D,EAAAC,EAAAC,cAAA,UACGyD,EAAcvD,IAAI,SAAA2D,GAAE,OACnB/D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiB4D,OAKrC,IADA,IAAMC,EAASnD,KAAK4C,EAAUhB,GAAMhC,OAAOI,KAAK,SAAW4B,IAvBpCwB,EAAA,SAwBdC,GACP,IAAIC,EAAM,GACJ1C,EAAQuC,EAAOE,GACrBC,EAAIL,KACF9D,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVG,QAAS,WACPM,EAAK+B,iBAAiBF,EAAMhB,KAHhC,KAOAzB,EAAAC,EAAAC,cAAA,YAAOuB,MAIb,IAAK,IAAI2C,EAAI,EAAGA,EAAIxD,EAAK1B,MAAMK,QAAQ+D,OAAQc,IAAK,CAClD,IAAM1C,EAAWd,EAAK1B,MAAMK,QAAQ6E,GAAG/E,GACvC8E,EAAIL,KACF9D,EAAAC,EAAAC,cAACmE,EAAD,CACEnD,MAAOiC,EAASzB,GAAUD,GAC1BE,YAAaf,EAAKe,YAClBD,SAAUA,EACVD,MAAOA,KAIbiC,EAAKI,KAAK9D,EAAAC,EAAAC,cAAA,UAAKiE,KA5BRD,EAAI,EAAGA,EAAIF,EAAOV,OAAQY,IAAKD,EAA/BC,GA8BT,OAAOlE,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2D,SAAA,KAAGF,0CAEG,IAAAY,EAAAzD,KAEb,OAAOb,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2D,SAAA,KADgB,CAAC,WAAY,UAAW,SACtBxD,IAAI,SAAA+D,GAAG,OAAIG,EAAKC,mBAAmBJ,8CAU5D,IAAMV,EAAiC,OAAvB5C,KAAK3B,MAAMuE,QAAmB,UAAY,KAC1D5C,KAAKjB,SAAS,CAAE6D,6CAET,IAAAe,EAAA3D,KAAA4D,EACsB5D,KAAK3B,MAA1BK,EADDkF,EACClF,QAASkE,EADVgB,EACUhB,QACXiB,EAAcnF,EAAQa,IAAI,SAAAN,GAAM,OAAIA,EAAOO,OAC3CsE,EAAuB,OAAZlB,EAAmB,SAAW,GACzCmB,EAAc/D,KAAK3B,MAAMwD,gBAAkB7B,KAAK3B,MAAM2D,iBAAmB,SAAW,GACpFgC,EACJhE,KAAK3B,MAAMwD,gBACX7B,KAAK3B,MAAMwD,eAAeoC,OAAO,EAAGjE,KAAK3B,MAAMwD,eAAeY,OAAS,GACnEyB,EAAkBlE,KAAK3B,MAAMwD,eAAiB,SAAW,GACzDsC,EAAqBnE,KAAK3B,MAAM2D,iBAAmB,SAAW,GAC9DC,EACJjC,KAAK3B,MAAM0D,iBACX/B,KAAK3B,MAAM0D,gBAAgBkC,OAAO,EAAGjE,KAAK3B,MAAM0D,gBAAgBU,OAAS,GAC3E,OACEtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OACEC,UAAS,oBAAAM,OAAsBkE,GAC/BrE,QAAS,WACPkE,EAAKS,kBAHT,MAOAjF,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVG,QAAS,WACPkE,EAAKtB,kBAHT,UAQFlD,EAAAC,EAAAC,cAAA,SAAOC,UAAU,WACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACG,CAAC,IAAIO,OAAOiE,GAAatE,IAAI,SAAA8E,GAAG,OAC/BlF,EAAAC,EAAAC,cAAA,UAAKgF,MAGRrE,KAAKsE,iBAGVnF,EAAAC,EAAAC,cAAA,OACEC,UAAS,mBAAAM,OAAqBmE,GAC9BtE,QAAS,SAACU,GACHwD,EAAKY,cAAcC,SAASrE,EAAEC,SACjCuD,EAAK5E,SAAS,CAAE8C,gBAAgB,MAGpC1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBmF,IAAK,SAAAC,GAAI,OAAKf,EAAKY,cAAgBG,IAChEvF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAM,OAAcsE,IAC1B/E,EAAAC,EAAAC,cAAA,qBAAAO,OAAgBoE,IAChB7E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,SACEuC,KAAK,OACL1B,SAAU,SAACC,GACTwD,EAAK5E,SAAS,CAAE4D,SAAUxC,EAAEC,OAAOC,SAErCA,MAAOL,KAAK3B,MAAMsE,SAClBrC,WAAY,SAAAH,GACI,UAAVA,EAAEI,KAAiBoD,EAAKjB,oBAGhCvD,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVG,QAASO,KAAK0C,gBAFhB,QAOJvD,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAM,OAAiBuE,IAC7BhF,EAAAC,EAAAC,cAAA,oBAAAO,OAAeqC,EAAf,KAAArC,OAA8BI,KAAK3B,MAAM2D,mBACzC7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVG,QAASO,KAAKiC,aAFhB,OAKA9C,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVG,QAAS,WAAOkE,EAAK5E,SAAS,CAACiD,iBAAkB,GAAID,gBAAiB,OAFxE,kBAxOOvB,aC+CRmE,6MA5CbtG,MAAQC,EAAKC,MAAMF,OAAS,CAC1BuG,KAAM,CAAEhC,QAAS,WACjBjE,MAAM,EACNkG,WAAOC,KAETC,QAAU,CACRC,IAAK,SAAC5E,EAAQZ,GACZ,OAAOY,EAAO6E,eAAezF,GAAQY,EAAOZ,GAAQ,MAGxD0F,iBAAmB,SAAA7G,GACjB,IAAMiE,EAAYhE,EAAKD,MAAMuG,MAAQtG,EAAKD,MAAMuG,KAAKtC,UAAa,GAClEjE,EAAMK,QAAQwD,QAAQ,SAAAjD,GACpBqD,EAASrD,EAAOT,IAAM8D,EAASrD,EAAOT,KAAO,IAAI2G,MAAM,GAAI7G,EAAKyG,WAElE,IAAMH,EAAI/E,OAAA2C,EAAA,EAAA3C,CAAA,GAAQvB,EAAKD,MAAMuG,KAAnB,CAAyBlG,QAASL,EAAMK,QAAS4D,aAC3DhE,EAAKS,SAAS,CAAE8F,MAAOxG,EAAOuG,YAEhCQ,gBAAkB,SAAA/G,GAAK,OAAIC,EAAKS,SAAS,CAAE6F,KAAMvG,OACjDgH,gBAAkB,kBAAM/G,EAAKS,SAAS,CAAEJ,MAAOL,EAAKD,MAAMM,gFACjD,IAAAgB,EACuBK,KAAK3B,MAA3BuG,EADDjF,EACCiF,KAAMjG,EADPgB,EACOhB,KAAMkG,EADblF,EACakF,MACpB,OACE1F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACfX,EACCQ,EAAAC,EAAAC,cAACiG,EAAD,CACEjH,MAAOuG,EACP/F,YAAamB,KAAKoF,gBAClB/C,cAAerC,KAAKqF,kBAGtBlG,EAAAC,EAAAC,cAACkG,EAAD,CACElH,MAAOwG,EACPhG,YAAamB,KAAKkF,iBAClBtG,UAAWoB,KAAKqF,2BApCZ7E,aCMEgF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3G,EAAAC,EAAAC,cAAC0G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e42bf68e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Setup.css';\n\nclass Setup extends Component {\n  state = this.props.state || {\n    id: 0,\n    newPlayerName: '',\n    players: [],\n    play: false,\n  };\n  enterGame = () => {\n    this.props.reportState(this.state);\n    this.props.enterGame();\n  };\n  removePlayer = id => {\n    const { players } = this.state;\n    this.setState({ players: players.filter(player => player.id !== id) });\n  };\n  getPlayersList = () => {\n    return (\n      <ul className=\"players-list\">\n        {this.state.players.map(player => {\n          return (\n            <li>\n              <span>{player.name}</span>\n              <button\n                onClick={() => {\n                  this.removePlayer(player.id);\n                }}>\n                x\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n  submitPlayer = () => {\n    const { id, newPlayerName, players } = this.state;\n    this.setState({\n      players: [...players, { id, name: newPlayerName }],\n      newPlayerName: '',\n      id: id + 1,\n    });\n  };\n  render() {\n    return (\n      <div className=\"Setup offset-md-3 col-md-6 col-xs-12\">\n        <div className=\"new-player\">\n          <input\n            className=\"player-name\"\n            placeholder=\"player name\"\n            onChange={e => this.setState({ newPlayerName: e.target.value })}\n            onKeyPress={e => {\n              if (e.key === 'Enter') this.submitPlayer();\n            }}\n            value={this.state.newPlayerName}\n          />\n          <button\n            className=\"new-player-submit\"\n            onClick={() => this.submitPlayer()}>\n            Save Player\n          </button>\n        </div>\n        {this.getPlayersList()}\n        <div className=\"play\" onClick={() => this.enterGame()}>\n          Play\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Setup;\n","import React from 'react';\nimport './Cell.css';\n\nconst valToColor = ['inherit', '#ff785f', '#ff2a45', '#a143be', '#ccc'];\n\nfunction Cell({ label, playerID, updateValue, value }) {\n  return (\n    <td\n      className=\"color\"\n      onClick={() => {\n        updateValue(playerID, label);\n      }}\n      style={{ backgroundColor: valToColor[value] }}\n    />\n  );\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport './Gameplay.css';\nimport Cell from './Cell';\n\nclass Gameplay extends Component {\n  state = this.props.state;\n  classicSuspects = [\n    'Mr. Green',\n    'Prof. Plum',\n    'Col. Mustard',\n    'Mrs. Peacock',\n    'Miss Scarlet',\n    'Mrs. White',\n  ];\n  MDSuspects = this.classicSuspects.concat([\n    'Mme Rose',\n    'Sgt. Gray',\n    'M. Brunette',\n    'Miss Peach',\n  ]);\n  classicWeapons = [\n    'Candlestick',\n    'Knife',\n    'Lead Pipe',\n    'Revolver',\n    'Rope',\n    'Wrench',\n  ];\n  MDWeapons = this.classicWeapons.concat(['Poison', 'Horseshoe']);\n  classicRooms = [\n    'Conservatory',\n    'Lounge',\n    'Kitchen',\n    'Library',\n    'Hall',\n    'Study',\n    'Ballroom',\n    'Dining Room',\n    'Billiard Room',\n  ];\n  MDRooms = [\n    'Courtyard',\n    'Gazebo',\n    'Drawing Room',\n    'Dining Room',\n    'Kitchen',\n    'Carriage House',\n    'Trophy Room',\n    'Conservatory',\n    'Studio',\n    'Billiard Room',\n    'Library',\n    'Fountain',\n  ];\n  customSuspects = [];\n  customWeapons = [];\n  customRooms = [];\n  newAssetModal = type => {\n    this.setState({ editingAnAsset: type });\n  };\n  removeAssetModal = (type, label) => {\n    this.setState({ removeAssetType: type, removeAssetLabel: label });\n  };\n  removeAsset = () => {\n    const type = this.state.removeAssetType;\n    const label = this.state.removeAssetLabel;\n    const lists =     [this['classic' + type], this['MD' + type], this['custom' + type]];\n    ['classic', 'MD', 'custom'].forEach(prefix => {this[prefix + type] = this[prefix + type].filter(\n      value => value !== label\n    )})\n    this.setState({\n      removeAssetType: '',\n      removeAssetLabel: '',\n    });\n  }\n  noteValues = [0, 1, 2, 3, 4];\n  returnToSetup = () => {\n    this.props.reportState(this.state);\n    this.props.returnToSetup();\n  };\n  updateValue = (playerID, label) => {\n    const { tracking } = this.state;\n    const newTracking = { ...tracking };\n\n    newTracking[playerID][label] =\n      (newTracking[playerID][label] + 1) % this.noteValues.length;\n    this.setState({ tracking: newTracking });\n  };\n  populateRowsOfType(type) {\n    const { tracking, version } = this.state;\n\n    let rows = [];\n    const sectionHeader = [\n      <>\n        <div\n          className=\"addNew\"\n          onClick={() => {\n            this.newAssetModal(type);\n          }}>\n          +\n        </div>\n        <span className=\"header\">{type}</span>\n      </>,\n    ].concat(new Array(this.state.players.length));\n    rows.push(\n      <tr>\n        {sectionHeader.map(el => (\n          <td className=\"sectionHeader\">{el}</td>\n        ))}\n      </tr>,\n    );\n    const assets = this[version + type].concat(this['custom' + type]);\n    for (let i = 0; i < assets.length; i++) {\n      let row = [];\n      const label = assets[i];\n      row.push(\n        <td>\n          <div className='assetContainer'>\n            <div\n              className=\"removeAsset\"\n              onClick={() => {\n                this.removeAssetModal(type, label);\n              }}>\n              -\n            </div>\n            <span>{label}</span>\n          </div>\n        </td>,\n      );\n      for (let j = 0; j < this.state.players.length; j++) {\n        const playerID = this.state.players[j].id;\n        row.push(\n          <Cell\n            value={tracking[playerID][label]}\n            updateValue={this.updateValue}\n            playerID={playerID}\n            label={label}\n          />,\n        );\n      }\n      rows.push(<tr>{row}</tr>);\n    }\n    return <>{rows}</>;\n  }\n  populateBody() {\n    const rowScaffolding = ['Suspects', 'Weapons', 'Rooms'];\n    return <>{rowScaffolding.map(row => this.populateRowsOfType(row))}</>;\n  }\n  submitNewAsset = () => {\n    this['custom' + this.state.editingAnAsset] = this['custom' + this.state.editingAnAsset].concat([this.state.newAsset]);\n    this.setState({\n      editingAnAsset: false,\n      newAsset: '',\n    });\n  }\n  toggleVersion() {\n    const version = this.state.version === 'MD' ? 'classic' : 'MD';\n    this.setState({ version });\n  }\n  render() {\n    const { players, version } = this.state;\n    const playerNames = players.map(player => player.name);\n    const MDActive = version === 'MD' ? 'active' : '';\n    const modalActive = this.state.editingAnAsset || this.state.removeAssetLabel ? 'active' : '';\n    const editingAsset =\n      this.state.editingAnAsset &&\n      this.state.editingAnAsset.substr(0, this.state.editingAnAsset.length - 1);\n    const newAssetVisible = this.state.editingAnAsset ? 'active' : '';\n    const removeAssetVisible = this.state.removeAssetLabel ? 'active' : '';\n    const removeAsset = \n      this.state.removeAssetType &&\n      this.state.removeAssetType.substr(0, this.state.removeAssetType.length - 1);\n    return (\n      <div className=\"Game offset-md-3 col-md-6 col-xs-12\">\n        <div className=\"top-row\">\n          <div\n            className={`master-detective ${MDActive}`}\n            onClick={() => {\n              this.toggleVersion();\n            }}>\n            MD\n          </div>\n          <div\n            className=\"return\"\n            onClick={() => {\n              this.returnToSetup();\n            }}>\n            Setup\n          </div>\n        </div>\n        <table className=\"tracker\">\n          <tbody>\n            <tr>\n              {[''].concat(playerNames).map(val => (\n                <td>{val}</td>\n              ))}\n            </tr>\n            {this.populateBody()}\n          </tbody>\n        </table>\n        <div\n          className={`modalBackground ${modalActive}`}\n          onClick={(e) => {\n            if (!this.modalContents.contains(e.target)) {\n              this.setState({ editingAnAsset: false });\n            }\n          }}>\n          <div className=\"modalContents\" ref={node => (this.modalContents = node)}>\n            <div className={`newAsset ${newAssetVisible}`}>\n              <h4>{`Add new ${editingAsset}`}</h4>\n              <div className=\"inputContainer\">\n                <input\n                  type=\"text\"\n                  onChange={(e) => {\n                    this.setState({ newAsset: e.target.value });\n                  }}\n                  value={this.state.newAsset}\n                  onKeyPress={e => {\n                    if (e.key === 'Enter') this.submitNewAsset();\n                  }}\n                />\n                <div\n                  className=\"submit\"\n                  onClick={this.submitNewAsset}>\n                  OK\n                </div>\n              </div>\n            </div>\n            <div className={`removeAsset ${removeAssetVisible}`}>\n              <h4>{`Remove ${removeAsset} ${this.state.removeAssetLabel}`}</h4>\n              <div className=\"inputContainer\">\n                <div\n                  className=\"submit\"\n                  onClick={this.removeAsset}>\n                  Yes\n                </div>\n                <div\n                  className=\"submit\"\n                  onClick={() => {this.setState({removeAssetLabel: '', removeAssetType: ''})}}>\n                  No\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Gameplay;\n","import React, { Component } from 'react';\nimport './App.css';\nimport './vendor/bootstrap-grid.min.css';\nimport Setup from './Setup';\nimport Game from './Gameplay';\n\nclass App extends Component {\n  state = this.props.state || {\n    game: { version: 'classic' },\n    play: false,\n    setup: undefined,\n  };\n  handler = {\n    get: (target, name) => {\n      return target.hasOwnProperty(name) ? target[name] : 0;\n    }\n  };\n  updateSetupState = state => {\n    const tracking = (this.state.game && this.state.game.tracking) || {};\n    state.players.forEach(player => {\n      tracking[player.id] = tracking[player.id] || new Proxy({}, this.handler);\n    });\n    const game = { ...this.state.game, players: state.players, tracking };\n    this.setState({ setup: state, game });\n  };\n  updateGameState = state => this.setState({ game: state });\n  toggleGameState = () => this.setState({ play: !this.state.play });\n  render() {\n    const { game, play, setup } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {play ? (\n            <Game\n              state={game}\n              reportState={this.updateGameState}\n              returnToSetup={this.toggleGameState}\n            />\n          ) : (\n            <Setup\n              state={setup}\n              reportState={this.updateSetupState}\n              enterGame={this.toggleGameState}\n            />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}