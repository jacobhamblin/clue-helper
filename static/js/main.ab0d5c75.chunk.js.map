{"version":3,"sources":["logo.svg","Setup/index.js","Gameplay/Cell/index.js","Gameplay/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Setup","state","_this","props","id","newPlayerName","players","play","enterGame","reportState","removePlayer","setState","filter","player","getPlayersList","react_default","a","createElement","className","map","name","onClick","submitPlayer","_this$state","concat","Object","toConsumableArray","_this2","this","placeholder","onChange","e","target","value","onKeyPress","key","Component","valToColor","Cell","_ref","index","playerID","updateValue","playerOrder","style","backgroundColor","Gameplay","suspects","weapons","rooms","noteValues","returnToSetup","tracking","newTracking","objectSpread","length","offset","type","rows","sectionHeader","charAt","toUpperCase","slice","Array","push","el","i","row","j","Gameplay_Cell","Fragment","rowScaffolding","populateRowsOfType","_this3","playerNames","val","populateBody","App","game","undefined","setup","updateSetupState","forEach","fill","updateGameState","toggleGameState","src_Gameplay","src_Setup","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab0d5c75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './Setup.css';\n\nclass Setup extends Component {\n  state = this.props.state || {\n    id: 0,\n    newPlayerName: '',\n    players: [],\n    play: false,\n  };\n  enterGame = () => {\n    this.props.reportState(this.state);\n    this.props.enterGame();\n  };\n  removePlayer = id => {\n    const { players } = this.state;\n    this.setState({ players: players.filter(player => player.id !== id) });\n  };\n  getPlayersList = () => {\n    return (\n      <ul className=\"players-list\">\n        {this.state.players.map(player => {\n          return (\n            <li>\n              <span>{player.name}</span>\n              <button\n                onClick={() => {\n                  this.removePlayer(player.id);\n                }}>\n                x\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n  submitPlayer = () => {\n    const { id, newPlayerName, players } = this.state;\n    this.setState({\n      players: [...players, { id, name: newPlayerName }],\n      newPlayerName: '',\n      id: id + 1,\n    });\n  };\n  render() {\n    return (\n      <div className=\"Setup offset-md-3 col-md-6 col-xs-12\">\n        <div className=\"new-player\">\n          <input\n            className=\"player-name\"\n            placeholder=\"player name\"\n            onChange={e => this.setState({ newPlayerName: e.target.value })}\n            onKeyPress={e => {\n              if (e.key === 'Enter') this.submitPlayer();\n            }}\n            value={this.state.newPlayerName}\n          />\n          <button\n            className=\"new-player-submit\"\n            onClick={() => this.submitPlayer()}>\n            Save Player\n          </button>\n        </div>\n        {this.getPlayersList()}\n        <div className=\"play\" onClick={() => this.enterGame()}>\n          Play\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Setup;\n","import React from 'react';\nimport './Cell.css';\n\nconst valToColor = ['inherit', '#ff785f', '#ff2a45', '#a143be'];\n\nfunction Cell({ index, playerID, playerOrder, updateValue, value }) {\n  const order = playerOrder > 0 ? playerOrder % 2 == 0 ? 'even' : 'odd' : '';\n  return (\n    <td\n      className='color'\n      onClick={() => {\n        updateValue(playerID, index);\n      }}\n      style={{ backgroundColor: valToColor[value] }}\n    />\n  );\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport './Gameplay.css';\nimport Cell from './Cell';\n\nclass Gameplay extends Component {\n  state = this.props.state;\n  suspects = [\n    'Mr. Green',\n    'Prof. Plum',\n    'Col. Mustard',\n    'Mrs. White',\n    'Miss Scarlet',\n    'Mrs. White',\n  ];\n  weapons = ['Candlestick', 'Knife', 'Lead Pipe', 'Revolver', 'Rope', 'Wrench'];\n  rooms = [\n    'Conservatory',\n    'Lounge',\n    'Kitchen',\n    'Library',\n    'Hall',\n    'Study',\n    'Ballroom',\n    'Dining Room',\n    'Billiard Room',\n  ];\n  noteValues = [0, 1, 2, 3];\n  returnToSetup = () => {\n    this.props.reportState(this.state);\n    this.props.returnToSetup();\n  };\n  updateValue = (playerID, index) => {\n    const { tracking } = this.state;\n    const newTracking = { ...tracking };\n\n    newTracking[playerID][index] =\n      (newTracking[playerID][index] + 1) % this.noteValues.length;\n    this.setState({ tracking: newTracking });\n  };\n  populateRowsOfType({ offset, type }) {\n    const { tracking } = this.state;\n    let rows = [];\n    const sectionHeader = [\n      <span className=\"header\">\n        {type.charAt(0).toUpperCase() + type.slice(1)}\n      </span>,\n    ].concat(new Array(this.state.players.length));\n    rows.push(\n      <tr>\n        {sectionHeader.map(el => (\n          <td>{el}</td>\n        ))}\n      </tr>,\n    );\n    for (let i = 0; i < this[type].length; i++) {\n      let row = [];\n      row.push(\n        <td>\n          <span>{this[type][i]}</span>\n        </td>,\n      );\n      for (let j = 0; j < this.state.players.length; j++) {\n        const playerID = this.state.players[j].id;\n        row.push(\n          <Cell\n            playerOrder={j}\n            value={tracking[playerID][i + offset]}\n            updateValue={this.updateValue}\n            playerID={playerID}\n            index={i + offset}\n          />,\n        );\n      }\n      rows.push(<tr>{row}</tr>);\n    }\n    return <>{rows}</>;\n  }\n  populateBody() {\n    const rowScaffolding = [\n      { offset: 0, type: 'suspects' },\n      { offset: this.suspects.length, type: 'weapons' },\n      { offset: this.suspects.length + this.weapons.length, type: 'rooms' },\n    ];\n    return <>{rowScaffolding.map(row => this.populateRowsOfType(row))}</>;\n  }\n  render() {\n    const playerNames = this.state.players.map(player => player.name);\n    return (\n      <div className=\"Game offset-md-3 col-md-6 col-xs-12\">\n        <div\n          className=\"return\"\n          onClick={() => {\n            this.returnToSetup();\n          }}>\n          Setup\n        </div>\n        <table className=\"tracker\">\n          <tbody>\n            <tr>\n              {[''].concat(playerNames).map(val => (\n                <td>{val}</td>\n              ))}\n            </tr>\n            {this.populateBody()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Gameplay;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './vendor/bootstrap-grid.min.css';\nimport Setup from './Setup';\nimport Game from './Gameplay';\n\nclass App extends Component {\n  state = this.props.state || {\n    game: undefined,\n    play: false,\n    setup: undefined,\n  };\n  updateSetupState = state => {\n    const tracking = (this.state.game && this.state.game.tracking) || {};\n    state.players.forEach(player => {\n      tracking[player.id] = tracking[player.id] || new Array(21).fill(0);\n    });\n    const game = { ...this.state.game, players: state.players, tracking };\n    this.setState({ setup: state, game });\n  };\n  updateGameState = state => this.setState({ game: state });\n  toggleGameState = () => this.setState({ play: !this.state.play });\n  render() {\n    const { game, play, setup } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {play ? (\n            <Game\n              state={game}\n              reportState={this.updateGameState}\n              returnToSetup={this.toggleGameState}\n            />\n          ) : (\n            <Setup\n              state={setup}\n              reportState={this.updateSetupState}\n              enterGame={this.toggleGameState}\n            />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}